package sogeti.omaha.recruiting;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UpdateCandidateDetailBean {

	String firstName;
	String lastname;
	String linkedIn;
	String referrer;
	String skillSet;
	String email;
	String phoneNo;
	String salary;
	String comments;
	Map<String, String> method;
	String level;
	Map<String, String> practice;
	Map<String, String> methodList;
	List<String> levelList;
	Map<String, String> practiceList;
	private String skillSets;

	public String getFirstName(String candidateID) {
		String firstNameQuery = "SELECT first_name" + " FROM Candidate_Table"
				+ " WHERE candidate_id = " + Integer.parseInt(candidateID);
		firstName = (String) new DBConnectHelper().getDbConnection(
				firstNameQuery, "select", "string");
		return firstName;
	}

	public String getLastname(String candidateID) {
		String lastNameQuery = "SELECT last_name" + " FROM Candidate_Table"
				+ " WHERE candidate_id = " + Integer.parseInt(candidateID);
		lastname = (String) new DBConnectHelper().getDbConnection(
				lastNameQuery, "select", "string");
		return lastname;
	}

	public String getLinkedIn(String candidateID) {
		String linkedInQuery = "SELECT ISNULL(linkedin_profile,'Enter LinkedIn Profile')"
				+ " FROM Candidate_Table"
				+ " WHERE candidate_id = "
				+ Integer.parseInt(candidateID);
		linkedIn = (String) new DBConnectHelper().getDbConnection(
				linkedInQuery, "select", "string");
		return linkedIn;
	}

	public String getReferrer(String candidateID) {
		String referrerQuery = "SELECT ISNULL(refered_by,'No Referrer')"
				+ " FROM Candidate_Table" + " WHERE candidate_id = "
				+ Integer.parseInt(candidateID);
		referrer = (String) new DBConnectHelper().getDbConnection(
				referrerQuery, "select", "string");
		return referrer;
	}

	public String getSkillSet(String candidateID) {
		String skillsQuery = "SELECT ISNULL(skillset,'Add Skills')"
				+ " FROM Candidate_Table" + " WHERE candidate_id = "
				+ Integer.parseInt(candidateID);
		skillSet = (String) new DBConnectHelper().getDbConnection(skillsQuery,
				"select", "string");
		return skillSet;
	}

	public String getEmail(String candidateID) {
		String emailQuery = "SELECT ISNULL(email,'Enter Email')"
				+ " FROM Candidate_Table" + " WHERE candidate_id = "
				+ Integer.parseInt(candidateID);
		email = (String) new DBConnectHelper().getDbConnection(emailQuery,
				"select", "string");
		return email;
	}

	public String getPhoneNo(String candidateID) {
		String phoneQuery = "SELECT ISNULL(phone, 'Enter Phone Number')"
				+ " FROM Candidate_Table" + " WHERE candidate_id = "
				+ Integer.parseInt(candidateID);
		phoneNo = (String) new DBConnectHelper().getDbConnection(phoneQuery,
				"select", "string");
		return phoneNo;
	}

	public String getSalary(String candidateID) {
		String salaryQuery = "SELECT ISNULL(salary_expectation,'Enter Salary Expectations')"
				+ " FROM Candidate_Table"
				+ " WHERE candidate_id = "
				+ Integer.parseInt(candidateID);
		salary = (String) new DBConnectHelper().getDbConnection(salaryQuery,
				"select", "string");
		return salary;
	}

	public String getComments(String candidateID) {
		String commentsQuery = "SELECT ISNULL(comments,'Enter Comments')"
				+ " FROM Candidate_Table" + " WHERE candidate_id = "
				+ Integer.parseInt(candidateID);
		comments = (String) new DBConnectHelper().getDbConnection(
				commentsQuery, "select", "string");
		return comments;
	}

	@SuppressWarnings("unchecked")
	public Map<String, String> getMethod(String candidateID) {
		method = new HashMap<String, String>();
		String methodsQuery = "Select m.method_id, m.method"
				+ " from Method_Table m, Candidate_Method_Table cm"
				+ " where cm.Method_ID = m.Method_ID"
				+ " and cm.Candidate_ID = " + Integer.parseInt(candidateID);
		method = (Map<String, String>) new DBConnectHelper().getDbConnection(
				methodsQuery, "select", "Map");
		return method;
	}

	public String getLevel(String candidateID) {
		String levelsQuery = "SELECT level " + " FROM Candidate_Level_Table"
				+ " WHERE Candidate_ID = " + Integer.parseInt(candidateID);
		level = (String) new DBConnectHelper().getDbConnection(levelsQuery,
				"select", "string");
		return level;
	}

	@SuppressWarnings("unchecked")
	public Map<String, String> getPractice(String candidateID) {
		practice = new HashMap<String, String>();
		String practicesQuery = "Select p.practice_id, p.practice_name"
				+ " from Practice_Table p, Candidate_Practice_Table cp"
				+ " where cp.Practice_ID = p.Practice_ID"
				+ " and cp.Candidate_ID = " + Integer.parseInt(candidateID);
		practice = (HashMap<String, String>) new DBConnectHelper()
				.getDbConnection(practicesQuery, "select", "map");
		return practice;
	}

	@SuppressWarnings("unchecked")
	public Map<String, String> getMethodList() {
		methodList = new HashMap<String, String>();

		String methodsQuery = "SELECT Method_ID, Method FROM Method_Table";
		methodList = (Map<String, String>) new DBConnectHelper()
				.getDbConnection(methodsQuery, "select", "Map");
		return methodList;
	}

	@SuppressWarnings("unchecked")
	public List<String> getLevelList() {
		levelList = new ArrayList<String>();
		String levelsQuery = "SELECT Level FROM Level_Table";
		levelList = (ArrayList<String>) new DBConnectHelper().getDbConnection(
				levelsQuery, "select", "list");
		return levelList;
	}

	@SuppressWarnings("unchecked")
	public Map<String, String> getPracticeList() {
		practiceList = new HashMap<String, String>();
		String practicesQuery = "SELECT Practice_ID, Practice_Name FROM Practice_Table";
		practiceList = (HashMap<String, String>) new DBConnectHelper()
				.getDbConnection(practicesQuery, "select", "map");
		return practiceList;
	}

	public String getSkillSets() {
		String skillSetQuery = "SELECT Skill FROM Skills_Table";
		skillSets = (String) new DBConnectHelper().getDbConnection(
				skillSetQuery, "select", "multipleString");
		return skillSets;
	}

	public void insertCandidateDetails(String firstName, String lastname,
			String linkedIn, String email, String skills, String comments,
			String methodId, String referrer, String level, String practiceId,
			String stageId, String phoneNumber, String salary) {
		String referreName = "";
		/*
		 * System.out.println("FistName: " + firstName);
		 * System.out.println("lastname: " + lastname);
		 * System.out.println("linkedIn: " + linkedIn);
		 * System.out.println("email: " + email); System.out.println("skils: " +
		 * skills); System.out.println("comments: " + comments);
		 * System.out.println("methodId: " + methodId);
		 * System.out.println("referrer: " + referrer);
		 * System.out.println("level: " + level);
		 * System.out.println("practiceId: " + practiceId);
		 */

		if (methodId.equals("1")) {
			referreName = referrer;
		}
		int newCandidateID = 0;
		String lastCandidateIdQuery = "SELECT TOP 1 Candidate_ID FROM Candidate_Table "
				+ "ORDER BY Candidate_ID DESC";
		newCandidateID = Integer.parseInt((String) new DBConnectHelper()
				.getDbConnection(lastCandidateIdQuery, "select", "string")) + 1;
		// System.out.println(newCandidateID);

		String insertCandidateTableQuery = "INSERT INTO Candidate_Table"
				+ "(Candidate_ID, Last_Name, First_Name, LinkedIn_Profile, Skillset, Refered_By, "
				+ "Date_Added, Date_Updated, Comments, Use_Flag, email, phone, salary_expectation)"
				+ " VALUES("
				+ newCandidateID
				+ ", '"
				+ lastname
				+ "', '"
				+ firstName
				+ "', '"
				+ linkedIn
				+ "', "
				+ "'"
				+ skills
				+ "', '"
				+ referreName
				+ "',  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, "
				+ "'"
				+ comments
				+ "', 'Y', '"
				+ email
				+ "', '"
				+ phoneNumber
				+ "', '" + salary + "')";
		int insertedRows = (int) new DBConnectHelper().getDbConnection(
				insertCandidateTableQuery, "update", "");

		if (insertedRows > 0) {

			// Insert Into Candidate_Methods Table
			String insertCandidateMethodTableQuery = "INSERT INTO Candidate_Method_Table "
					+ "VALUES("
					+ newCandidateID
					+ ", "
					+ methodId
					+ ", CURRENT_TIMESTAMP)";

			new DBConnectHelper().getDbConnection(
					insertCandidateMethodTableQuery, "update", "");

			// Insert into Candidate_Practice Table

			String insertCandidatePracticeTableQuery = "INSERT INTO Candidate_Practice_Table "
					+ "VALUES("
					+ newCandidateID
					+ ", "
					+ practiceId
					+ ", CURRENT_TIMESTAMP)";

			new DBConnectHelper().getDbConnection(
					insertCandidatePracticeTableQuery, "update", "");

			// Insert into Candidate_Level Table

			String insertCandidateLevelTableQuery = "INSERT INTO Candidate_Level_Table "
					+ "VALUES("
					+ newCandidateID
					+ ", '"
					+ level
					+ "', CURRENT_TIMESTAMP)";

			new DBConnectHelper().getDbConnection(
					insertCandidateLevelTableQuery, "update", "");

			// Insert into Stage table

			String insertCandidateStageTableQuery = "INSERT INTO Candidate_Stage_Table "
					+ "VALUES("
					+ newCandidateID
					+ ", "
					+ stageId
					+ ", CURRENT_TIMESTAMP, '', 'N')";

			new DBConnectHelper().getDbConnection(
					insertCandidateStageTableQuery, "update", "");

			// Insert into Skills table
			String[] skillArray = skills.split(",");
			for (int i = 0; i < skillArray.length; i++) {
				if (skillArray[i].trim() != null
						&& !skillArray[i].trim().isEmpty()) {
					String insertCandidateSkillsTableQuery = "INSERT INTO Candidate_Skills_Table "
							+ "VALUES("
							+ newCandidateID
							+ ", '"
							+ skillArray[i].trim() + "', CURRENT_TIMESTAMP)";
					// System.out.println(insertCandidateSkillsTableQuery);
					new DBConnectHelper().getDbConnection(
							insertCandidateSkillsTableQuery, "update", "");
				}
			}
		}

	}
}
